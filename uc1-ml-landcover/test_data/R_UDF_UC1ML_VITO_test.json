{
  "process_graph": {
    "filterbands1": {
      "arguments": {
        "bands": [
          "B02",
          "B03",
          "B04",
          "B08"
        ],
        "data": {
          "from_node": "maskscldilation1"
        }
      },
      "process_id": "filter_bands"
    },
    "loadcollection1": {
      "arguments": {
        "bands": [
          "B02",
          "B03",
          "B04",
          "B08",
          "SCL"
        ],
        "id": "SENTINEL2_L2A_SENTINELHUB",
        "spatial_extent": {
          "east": 11.39373650684562,
          "north": 46.49664403516334,
          "south": 46.45503677286743,
          "west": 11.350209788192972
        },
        "temporal_extent": [
          "2022-08-01T00:00:00Z",
          "2022-10-01T00:00:00Z"
        ]
      },
      "process_id": "load_collection"
    },
    "maskscldilation1": {
      "arguments": {
        "data": {
          "from_node": "loadcollection1"
        },
        "scl_band_name": "SCL"
      },
      "process_id": "mask_scl_dilation"
    },
    "reduce1": {
      "arguments": {
        "data": {
          "from_node": "filterbands1"
        },
        "dimension": "t",
        "reducer": {
          "process_graph": {
            "median1": {
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "process_id": "median",
              "result": true
            }
          }
        }
      },
      "process_id": "reduce_dimension"
    },
    "reduce2": {
      "arguments": {
        "data": {
          "from_node": "reduce1"
        },
        "dimension": "bands",
        "reducer": {
          "process_graph": {
            "run1": {
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "runtime": "Python",
                "udf": "from openeo_r_udf.udf_lib import prepare_udf, execute_udf\nfrom openeo.udf import XarrayDataCube\n\nr_udf = \"\"\"\nudf = function(data,context){\n  url1      <- 'https://github.com/Open-EO/r4openeo-usecases/blob/main/uc1-ml-landcover/test_data/models/TestModel1.rds?raw=True'\n  getModel  <<- readRDS(gzcon(url(url1)))\n  colnames(data)<-caret::predictors(getModel)\n  \n\n  prediction <-predict(getModel, data)\n  prediction = as.numeric(prediction)\n  \n  return(prediction)\n  \n}\n\"\"\"\n\nudf_path = prepare_udf(r_udf, '.')\n\ndef apply_datacube(cube: XarrayDataCube, context: dict) -> XarrayDataCube:\n\t# You need to change the dimension parameter if you want to reduce the bands dimension!\n\tnew_cube = execute_udf(\"reduce_dimension\", udf_path, cube.get_array(), dimension=\"bands\")\n\treturn XarrayDataCube(new_cube)\n"
              },
              "description": "You also need to change the dimension in the UDF code for now!",
              "process_id": "run_udf",
              "result": true
            }
          }
        }
      },
      "process_id": "reduce_dimension"
    },
    "saveresult1": {
      "arguments": {
        "data": {
          "from_node": "reduce2"
        },
        "format": "GTIFF"
      },
      "process_id": "save_result",
      "result": true
    }
  }
}